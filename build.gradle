buildscript {
	ext {
        pitestPluginVersion = '1.3.0'
        gradleReleaseVersion = '2.6.0'
	}
	repositories {
		mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
	}
    dependencies{
        classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:${pitestPluginVersion}"
        classpath "net.researchgate:gradle-release:${gradleReleaseVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'net.researchgate.release'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
    compile 'io.lettuce:lettuce-core:5.0.5.RELEASE'
    compile 'com.rabbitmq:amqp-client:5.4.0'
	testCompile 'junit:junit:4.12'
    testCompile group: 'org.awaitility', name: 'awaitility', version: '3.1.2'
    implementation 'com.google.code.gson:gson:2.8.5'
}

test {
    useJUnit()
    maxHeapSize = '1G'
}

pitest {
    targetClasses = ['br.net.eventstore.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    coverageThreshold = 95
    reportDir = 'build/reports/mutation-tests-results'
    timestampedReports = false
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

// Create a jar with javadoc
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

// Create a jar with soruces
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// hook all the artifacts under artifacts task
artifacts {
    archives javadocJar, sourcesJar
}

// Signing task
signing {
    sign configurations.archives
}

def v_ossrhUsername=""
def v_ossrhPassword=""

if (project.hasProperty("ossrhUsername")) {
    v_ossrhUsername = ossrhUsername
}
if (project.hasProperty("ossrhPassword")) {
    v_ossrhPassword = ossrhPassword
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: v_ossrhUsername, password: v_ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: v_ossrhUsername, password: v_ossrhPassword)
            }

            pom.project {
                name 'event.store'
                packaging 'jar'
                artifactId archivesBaseName
                version version
                description 'A simple and fast EventStore that support multiple persistence and notification providers'
                url 'https://www.eventstore.net.br'

                scm {
                    connection 'scm:git:git://github.com/biharck/eventstore.git'
                    developerConnection 'scm:git:git@github.com:biharck/eventstore.git'
                    url 'https://github.com/biharck/eventstore'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id 'biharck'
                        name 'Biharck Muniz Araujo'
                        email 'biharck@gmail.com'
                        url 'https://biharck.github.io'
                    }
                }
            }
        }
    }
}

afterReleaseBuild.dependsOn uploadArchives